version: '2'
services:

  php-fpm-7.2:
    extends:
      file: docker-compose.base.yml
      service: app_base
    build:
      context: ./php-fpm
      args:
        - LARADOCK_PHP_VERSION=7.2
    image: backend-php-fpm-7.2
    container_name: php-fpm-7.2

  php-fpm-7.4:
    extends:
      file: docker-compose.base.yml
      service: app_base
    build:
      context: ./php-fpm
      args:
        - LARADOCK_PHP_VERSION=7.4
    image: backend-php-fpm-7.4
    container_name: php-fpm-7.4

  php-fpm-8.0:
    extends:
      file: docker-compose.base.yml
      service: app_base
    build:
      context: ./php-fpm
      args:
        - LARADOCK_PHP_VERSION=8.0.1
    image: backend-php-fpm-8.0
    container_name: php-fpm-8.0

  php-fpm-8.1:
    extends:
      file: docker-compose.base.yml
      service: app_base
    build:
      context: ./php-fpm
      args:
        - LARADOCK_PHP_VERSION=8.1.0
    image: backend-php-fpm-8.1
    container_name: php-fpm-8.1
    ports:
      - '5173:5173'

  php-worker-7.4:
    extends:
      file: docker-compose.base.yml
      service: app_base
    container_name: php-worker-7.4
    build:
      context: ./php-worker
      args:
        - LARADOCK_PHP_VERSION=7.4
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      - ./php-worker/supervisord.d:/etc/supervisord.d
      - ./kafka/salesforce-gateway:/etc/coccoc/salesforce_gateway

  php-worker-8.0:
    extends:
      file: docker-compose.base.yml
      service: app_base
    container_name: php-worker
    build:
      context: ./php-worker
      args:
        - LARADOCK_PHP_VERSION=8.0
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      - ./php-worker/supervisord.d:/etc/supervisord.d
      - ./kafka/salesforce-gateway:/etc/coccoc/salesforce_gateway

  #Nginx Service
  nginx:
    extends:
      file: docker-compose.base.yml
      service: app_base
    build:
      context: ./nginx
    container_name: backend-nginx
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
    depends_on:
      - php-fpm-8.1
      - php-fpm-8.0
      - php-fpm-7.4
      - php-fpm-7.2

  #MySQL Service
  mysql:
    build:
      context: ./mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    container_name: backend-mysql
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${WORKSPACE_TIMEZONE}
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
      - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${MYSQL_PORT}:3306"
    cap_add:
      - SYS_NICE  # CAP_SYS_NICE

  #REDIS Service
  redis:
    build: ./redis
    container_name: backend-redis
    volumes:
      - redis:/data
    ports:
      - "${REDIS_PORT}:6379"

  redis-cluster:
    image: 'phuongdm1987/docker-redis-cluster:1.0.0'
    container_name: backend-redis-cluster
    hostname: redis-cluster
    volumes:
      - 'redis-cluster:/data'
    ports:
      - '7000-7005:7000-7005'
    environment:
      DEFAULT_PASSWORD: 'secret'

  redis-master:
    image: redis:latest
    container_name: backend-redis-master
    ports:
      - "${REDIS_MASTER_PORT}:6379"
    volumes:
      - redis-master:/data
      - redis-master:/var/lib/redis

  redis-slave:
    image: redis:latest
    container_name: backend-redis-slave
    command: redis-server --slaveof redis-master 6379
    links:
      - redis-master:redis-master
    volumes:
      - redis-slave:/data
      - redis-slave:/var/lib/redis

  redis-sentinel:
    build: ./redis-sentinel
    container_name: backend-redis-sentinel
    environment:
      - SENTINEL_DOWN_AFTER=5000
      - SENTINEL_FAILOVER=5000
    depends_on:
      - redis-master
      - redis-slave
    links:
      - redis-master:redis-master
      - redis-slave
    ports:
      - "${REDIS_SENTINEL_PORT}:26379"
    volumes:
      - redis-sentinel:/data

  ### RabbitMQ #############################################

  rabbitmq:
    build: ./rabbitMQ
    hostname: "${RABBITMQ_HOST_NAME}"
    container_name: backend-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_PASS}"
    ports:
      - "${RABBITMQ_NODE_HOST_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_HTTP_HOST_PORT}:15672"
      - "${RABBITMQ_MANAGEMENT_HTTPS_HOST_PORT}:15671"
    privileged: true
    volumes:
      - rabbitmq:/var/lib/rabbitmq

  ### MongoDB ##############################################
  mongodb:
    image: mongo:4.2
    container_name: backend-mongodb
    command: mongod --storageEngine wiredTiger
    volumes:
      - mongodb:/data/db
      - mongodb:/data/configdb
    ports:
      - "${MONGODB_PORT}:27017"

  ### ElasticSearch ########################################
  elasticsearch:
    build: ./elasticsearch
    container_name: backend-elasticsearch
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    environment:
      - cluster.name=laravel-docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "${ELASTICSEARCH_HOST_HTTP_PORT}:9200"
      - "${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300"

  clickhouse:
    image: yandex/clickhouse-server:22.1.3.7
    container_name: backend-clickhouse
    hostname: clickhouse
    ports:
      - "${CLICKHOUSE_HTTP_PORT}:8124"
      - "${CLICKHOUSE_CLIENT_PORT}:9002"
    volumes:
      - clickhouse:/var/lib/clickhouse

      - ${PWD}/clickhouse/qc-site/dictionary/external_serving_system_status_dictionary.xml:/etc/clickhouse-server/external_serving_system_status_dictionary.xml
      - ${PWD}/clickhouse/qc-site/dictionary/external_User_dictionary.xml:/etc/clickhouse-server/external_User_dictionary.xml
      - ${PWD}/clickhouse/qc-site/dictionary/external_UniCampaign_dictionary.xml:/etc/clickhouse-server/external_UniCampaign_dictionary.xml
      - ${PWD}/clickhouse/qc-site/dictionary/external_AgencyIdView_dictionary.xml:/etc/clickhouse-server/external_AgencyIdView_dictionary.xml
      - ${PWD}/clickhouse/qc-site/dictionary/external_MccIdView_dictionary.xml:/etc/clickhouse-server/external_MccIdView_dictionary.xml
      - ${PWD}/clickhouse/qc-site/dictionary/external_SupportIdView_dictionary.xml:/etc/clickhouse-server/external_SupportIdView_dictionary.xml
      - ${PWD}/clickhouse/qc-site/dictionary/external_SaleIdView_dictionary.xml:/etc/clickhouse-server/external_SaleIdView_dictionary.xml
      - ${PWD}/clickhouse/qc-site/dictionary/external_RecentActiveAdvertView_dictionary.xml:/etc/clickhouse-server/external_RecentActiveAdvertView_dictionary.xml
      - ${PWD}/clickhouse/qc-site/dictionary/external_RecentActiveMatchView_dictionary.xml:/etc/clickhouse-server/external_RecentActiveMatchView_dictionary.xml
      - ${PWD}/clickhouse/qc-site/dictionary/external_RecentActiveExtensionView_dictionary.xml:/etc/clickhouse-server/external_RecentActiveExtensionView_dictionary.xml
      - ${PWD}/clickhouse/qc-site/dictionary/external_polygon_regions_dictionary.xml:/etc/clickhouse-server/external_polygon_regions_dictionary.xml
      - ${PWD}/clickhouse/qc-site/dictionary/external_ExtensionOccasion_dictionary.xml:/etc/clickhouse-server/external_ExtensionOccasion_dictionary.xml
      - ${PWD}/clickhouse/qc-site/dictionary/dummy_data/polygons.txt:/etc/clickhouse-server/dummy_data/polygons.txt
      - ${PWD}/clickhouse/qc-site/dictionary/external_Industry_dictionary.xml:/etc/clickhouse-server/external_Industry_dictionary.xml
      - ${PWD}/clickhouse/qc-site/dictionary/external_UserPreference_dictionary.xml:/etc/clickhouse-server/external_UserPreference_dictionary.xml

      - ${PWD}/clickhouse/adnetwork/dictionary/external_placement_dictionary.xml:/etc/clickhouse-server/external_placement_dictionary.xml
      - ${PWD}/clickhouse/config.xml:/etc/clickhouse-server/config.xml

  mailhog:
    image: 'mailhog/mailhog:latest'
    container_name: backend-mailhog
    ports:
      - "${MAILHOG_SMTP_PORT}:1025"
      - "${MAILHOG_HTTP_PORT}:8025"

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: backend-zookeeper
    ports:
      - "${ZOOKEEPER_PORT}:2181"

  kafka:
    image: wurstmeister/kafka
    container_name: backend-kafka
    ports:
      - "${KAFKA_PORT}:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 172.17.0.1 # for mac/windows use this value in your docker-compose.yml host.docker.internal
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper

  cdn:
    image: docker.itim.vn/coccoc-qc/cdn
    container_name: qc-cdn
    volumes:
      - cdn:/var/lib/qc/cdn
    environment:
      SERVE_SERVER_NAME: cdn.qc.local
      WEB_DAV_SERVER_NAME: qc-cdn
      SERVE_PORT_HTTP: 20081
      SERVE_PORT_HTTPS: 20443
    networks:
      default:
        aliases:
          - qc-cdn
          - cdn.qc.local
    ports:
      - "20081:20081"
      - "20443:20443"

  ### SONARQUBE ################################################
  sonarqube:
    build:
      context: ./sonarqube
    hostname: "${SONARQUBE_HOSTNAME}"
    volumes:
      - ${DATA_PATH_HOST}/sonarqube/conf:/opt/sonarqube/conf
      - ${DATA_PATH_HOST}/sonarqube/data:/opt/sonarqube/data
      - ${DATA_PATH_HOST}/sonarqube/logs:/opt/sonarqube/logs
      - ${DATA_PATH_HOST}/sonarqube/extensions:/opt/sonarqube/extensions
      - ${DATA_PATH_HOST}/sonarqube/plugins:/opt/sonarqube/lib/bundled-plugins
    ports:
      - ${SONARQUBE_PORT}:9000
    depends_on:
      - postgres
    environment:
      - sonar.jdbc.username=${SONARQUBE_POSTGRES_USER}
      - sonar.jdbc.password=${SONARQUBE_POSTGRES_PASSWORD}
      - sonar.jdbc.url=jdbc:postgresql://${SONARQUBE_POSTGRES_HOST}:5432/${SONARQUBE_POSTGRES_DB}
    networks:
      default:
        aliases:
          - sonar.local

  ### PostgreSQL ###########################################
  postgres:
    build:
      context: ./postgres
      args:
        - POSTGRES_VERSION=${POSTGRES_VERSION}
    volumes:
      - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
      - ${POSTGRES_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - SONARQUBE_POSTGRES_INIT=${SONARQUBE_POSTGRES_INIT}
      - SONARQUBE_POSTGRES_DB=${SONARQUBE_POSTGRES_DB}
      - SONARQUBE_POSTGRES_USER=${SONARQUBE_POSTGRES_USER}
      - SONARQUBE_POSTGRES_PASSWORD=${SONARQUBE_POSTGRES_PASSWORD}

  ### MinIO #################################################
  minio:
    image: minio/minio
    container_name: backend-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio:/data
    environment:
      MINIO_ROOT_USER: root
      MINIO_ROOT_PASSWORD: p@ssW0rd
    command: server --console-address ":9001" /data
    networks:
      default:
        aliases:
          - minio.test

#Docker Networks
networks:
  default:
    driver: ${NETWORKS_DRIVER}
#Volumes
volumes:
  redis:
    driver: ${VOLUMES_DRIVER}
  redis-master:
    driver: ${VOLUMES_DRIVER}
  redis-slave:
    driver: ${VOLUMES_DRIVER}
  redis-cluster:
    driver: ${VOLUMES_DRIVER}
  redis-sentinel:
    driver: ${VOLUMES_DRIVER}
  mongodb:
    driver: ${VOLUMES_DRIVER}
  rabbitmq:
    driver: ${VOLUMES_DRIVER}
  clickhouse:
    driver: ${VOLUMES_DRIVER}
  elasticsearch:
    driver: ${VOLUMES_DRIVER}
  cdn:
    driver: ${VOLUMES_DRIVER}
  sonarqube:
    driver: ${VOLUMES_DRIVER}
  postgres:
    driver: ${VOLUMES_DRIVER}
  minio:
    driver: ${VOLUMES_DRIVER}
